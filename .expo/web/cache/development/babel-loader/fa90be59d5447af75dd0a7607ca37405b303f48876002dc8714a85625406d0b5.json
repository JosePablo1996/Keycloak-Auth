{"ast":null,"code":"import React from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { AuthProvider, useAuth } from \"./src/contexts/AuthContext\";\nimport WelcomeScreen from \"./src/screens/WelcomeScreen\";\nimport LoginScreen from \"./src/screens/LoginScreen\";\nimport ProfileScreen from \"./src/screens/ProfileScreen\";\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nvar AppNavigator = function AppNavigator() {\n  var _useAuth = useAuth(),\n    authState = _useAuth.authState,\n    isLoading = _useAuth.isLoading;\n  if (isLoading) {\n    return _jsx(Stack.Navigator, {\n      screenOptions: {\n        headerShown: false\n      },\n      children: _jsx(Stack.Screen, {\n        name: \"Welcome\",\n        component: WelcomeScreen\n      })\n    });\n  }\n  return _jsx(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false,\n      animation: 'slide_from_right',\n      gestureEnabled: true\n    },\n    children: authState.isAuthenticated ? _jsx(Stack.Screen, {\n      name: \"Profile\",\n      component: ProfileScreen\n    }) : _jsxs(_Fragment, {\n      children: [_jsx(Stack.Screen, {\n        name: \"Welcome\",\n        component: WelcomeScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Login\",\n        component: LoginScreen\n      })]\n    })\n  });\n};\nvar App = function App() {\n  return _jsxs(AuthProvider, {\n    children: [_jsx(StatusBar, {\n      barStyle: \"light-content\",\n      backgroundColor: \"transparent\",\n      translucent: true\n    }), _jsx(NavigationContainer, {\n      children: _jsx(AppNavigator, {})\n    })]\n  });\n};\nexport default App;","map":{"version":3,"names":["React","StatusBar","NavigationContainer","createNativeStackNavigator","AuthProvider","useAuth","WelcomeScreen","LoginScreen","ProfileScreen","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Stack","AppNavigator","_useAuth","authState","isLoading","Navigator","screenOptions","headerShown","children","Screen","name","component","animation","gestureEnabled","isAuthenticated","App","barStyle","backgroundColor","translucent"],"sources":["C:/Users/Jmira/OneDrive/Documents/proyectos_react/KeycloakSSOApp/KeycloakSSOApp/App.tsx"],"sourcesContent":["import React from 'react';\nimport { StatusBar } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { AuthProvider, useAuth } from './src/contexts/AuthContext';\nimport WelcomeScreen from './src/screens/WelcomeScreen';\nimport LoginScreen from './src/screens/LoginScreen';\nimport ProfileScreen from './src/screens/ProfileScreen';\n\n// Definir los tipos para la navegación\nexport type RootStackParamList = {\n  Welcome: undefined;\n  Login: undefined;\n  Profile: undefined;\n};\n\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\n// Componente que maneja la navegación basada en autenticación\nconst AppNavigator: React.FC = () => {\n  const { authState, isLoading } = useAuth();\n\n  // Mostrar pantalla de carga mientras verifica autenticación\n  if (isLoading) {\n    return (\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\n        <Stack.Screen name=\"Welcome\" component={WelcomeScreen} />\n      </Stack.Navigator>\n    );\n  }\n\n  return (\n    <Stack.Navigator \n      screenOptions={{ \n        headerShown: false,\n        animation: 'slide_from_right',\n        gestureEnabled: true,\n      }}\n    >\n      {authState.isAuthenticated ? (\n        // ✅ USUARIO AUTENTICADO: Solo puede ver Profile\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      ) : (\n        // ❌ USUARIO NO AUTENTICADO: Puede ver Welcome y Login\n        <>\n          <Stack.Screen name=\"Welcome\" component={WelcomeScreen} />\n          <Stack.Screen name=\"Login\" component={LoginScreen} />\n        </>\n      )}\n    </Stack.Navigator>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <AuthProvider>\n      <StatusBar \n        barStyle=\"light-content\" \n        backgroundColor=\"transparent\"\n        translucent={true}\n      />\n      <NavigationContainer>\n        <AppNavigator />\n      </NavigationContainer>\n    </AuthProvider>\n  );\n};\n\nexport default App;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,SAAA;AAE1B,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,0BAA0B,QAAQ,gCAAgC;AAC3E,SAASC,YAAY,EAAEC,OAAO;AAC9B,OAAOC,aAAa;AACpB,OAAOC,WAAW;AAClB,OAAOC,aAAa;AAAoC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,QAAA,IAAAC,SAAA,EAAAC,IAAA,IAAAC,KAAA;AASxD,IAAMC,KAAK,GAAGZ,0BAA0B,CAAqB,CAAC;AAG9D,IAAMa,YAAsB,GAAG,SAAzBA,YAAsBA,CAAA,EAAS;EACnC,IAAAC,QAAA,GAAiCZ,OAAO,CAAC,CAAC;IAAlCa,SAAS,GAAAD,QAAA,CAATC,SAAS;IAAEC,SAAS,GAAAF,QAAA,CAATE,SAAS;EAG5B,IAAIA,SAAS,EAAE;IACb,OACET,IAAA,CAACK,KAAK,CAACK,SAAS;MAACC,aAAa,EAAE;QAAEC,WAAW,EAAE;MAAM,CAAE;MAAAC,QAAA,EACrDb,IAAA,CAACK,KAAK,CAACS,MAAM;QAACC,IAAI,EAAC,SAAS;QAACC,SAAS,EAAEpB;MAAc,CAAE;IAAC,CAC1C,CAAC;EAEtB;EAEA,OACEI,IAAA,CAACK,KAAK,CAACK,SAAS;IACdC,aAAa,EAAE;MACbC,WAAW,EAAE,KAAK;MAClBK,SAAS,EAAE,kBAAkB;MAC7BC,cAAc,EAAE;IAClB,CAAE;IAAAL,QAAA,EAEDL,SAAS,CAACW,eAAe,GAExBnB,IAAA,CAACK,KAAK,CAACS,MAAM;MAACC,IAAI,EAAC,SAAS;MAACC,SAAS,EAAElB;IAAc,CAAE,CAAC,GAGzDM,KAAA,CAAAF,SAAA;MAAAW,QAAA,GACEb,IAAA,CAACK,KAAK,CAACS,MAAM;QAACC,IAAI,EAAC,SAAS;QAACC,SAAS,EAAEpB;MAAc,CAAE,CAAC,EACzDI,IAAA,CAACK,KAAK,CAACS,MAAM;QAACC,IAAI,EAAC,OAAO;QAACC,SAAS,EAAEnB;MAAY,CAAE,CAAC;IAAA,CACrD;EACH,CACc,CAAC;AAEtB,CAAC;AAED,IAAMuB,GAAa,GAAG,SAAhBA,GAAaA,CAAA,EAAS;EAC1B,OACEhB,KAAA,CAACV,YAAY;IAAAmB,QAAA,GACXb,IAAA,CAACT,SAAS;MACR8B,QAAQ,EAAC,eAAe;MACxBC,eAAe,EAAC,aAAa;MAC7BC,WAAW,EAAE;IAAK,CACnB,CAAC,EACFvB,IAAA,CAACR,mBAAmB;MAAAqB,QAAA,EAClBb,IAAA,CAACM,YAAY,IAAE;IAAC,CACG,CAAC;EAAA,CACV,CAAC;AAEnB,CAAC;AAED,eAAec,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}