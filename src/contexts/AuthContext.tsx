import * as React from 'react';
import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { Alert } from 'react-native';

// Interfaces ACTUALIZADAS - Incluye phone y address
interface UserInfo {
  sub?: string;
  preferred_username?: string;
  email?: string;
  given_name?: string;
  email_verified?: boolean;
  family_name?: string;
  name?: string;
  phone?: string;
  address?: string; // ‚úÖ NUEVO CAMPO AGREGADO
}

interface AuthState {
  isAuthenticated: boolean;
  accessToken: string | null;
  refreshToken: string | null;
  userInfo: UserInfo | null;
}

interface AuthResponse {
  access_token: string;
  id_token: string;
  token_type: string;
  expires_in: number;
  refresh_token?: string;
  scope?: string;
}

interface AuthContextValue {
  authState: AuthState;
  user: UserInfo | null;
  login: (username: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
  isLoading: boolean;
  error: string | null;
  clearError: () => void;
}

const AuthContext = createContext<AuthContextValue | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

// ‚úÖ CONFIGURACI√ìN ACTUALIZADA - SCOPE INCLUYE ADDRESS
const KEYCLOAK_CONFIG = {
  baseUrl: 'http://localhost:8080',
  realm: 'test-realm', 
  clientId: 'react-client',
  clientSecret: '5TNS3QssvRo6Xu7IVH9gadDhnGGt80bo',
  scope: 'openid profile email phone address' // ‚úÖ SCOPE ACTUALIZADO CON ADDRESS
};

// Funci√≥n helper para fetch con timeout
const fetchWithTimeout = async (
  url: string, 
  options: RequestInit = {}, 
  timeout = 10000
): Promise<Response> => {
  const controller = new AbortController();
  const { signal } = controller;

  const timeoutId = setTimeout(() => {
    controller.abort();
  }, timeout);

  try {
    const response = await fetch(url, {
      ...options,
      signal
    });
    clearTimeout(timeoutId);
    return response;
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
};

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }: { children: ReactNode }) => {
  const [authState, setAuthState] = useState<AuthState>({
    isAuthenticated: false,
    accessToken: null,
    refreshToken: null,
    userInfo: null
  });
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  // Funci√≥n para verificar conectividad con el servidor
  const checkServerConnectivity = async (): Promise<boolean> => {
    try {
      const testUrl = `${KEYCLOAK_CONFIG.baseUrl}/realms/${KEYCLOAK_CONFIG.realm}/.well-known/openid-configuration`;
      console.log('üîç Verificando conectividad con:', testUrl);
      
      const response = await fetchWithTimeout(testUrl, { 
        method: 'GET'
      }, 10000);
      
      if (response.ok) {
        const config = await response.json();
        console.log('‚úÖ Keycloak est√° accesible');
        console.log('üìç Token endpoint:', config.token_endpoint);
        return true;
      }
      console.log('‚ùå Keycloak respondi√≥ con error:', response.status);
      return false;
    } catch (error) {
      console.error('‚ùå Keycloak no est√° accesible:', error);
      return false;
    }
  };

  // Funci√≥n para extraer informaci√≥n del usuario del token - ACTUALIZADA CON ADDRESS
  const extractUserInfo = (idToken: string): UserInfo | null => {
    try {
      if (!idToken) {
        console.warn('‚ö†Ô∏è No se encontr√≥ idToken');
        return null;
      }

      const payload = idToken.split('.')[1];
      if (!payload) {
        console.error('‚ùå Token JWT malformado');
        return null;
      }

      let base64 = payload.replace(/-/g, '+').replace(/_/g, '/');
      while (base64.length % 4) {
        base64 += '=';
      }

      const decodedPayload = JSON.parse(atob(base64));

      const userInfo: UserInfo = {
        sub: decodedPayload.sub || '',
        preferred_username: decodedPayload.preferred_username || 'usuario',
        email: decodedPayload.email || '',
        given_name: decodedPayload.given_name || '',
        family_name: decodedPayload.family_name || '',
        name: decodedPayload.name || 'Usuario',
        email_verified: decodedPayload.email_verified || false,
        phone: decodedPayload.phone || '',
        address: decodedPayload.address || '' // ‚úÖ NUEVO CAMPO AGREGADO
      };

      console.log('üë§ UserInfo extra√≠do del token:', {
        username: userInfo.preferred_username,
        email: userInfo.email,
        name: userInfo.name,
        phone: userInfo.phone || 'No disponible',
        address: userInfo.address || 'No disponible' // ‚úÖ LOG DE LA DIRECCI√ìN
      });
      return userInfo;

    } catch (err) {
      console.error('‚ùå Error decodificando user info:', err);
      return null;
    }
  };

  const clearError = (): void => {
    setError(null);
  };

  const login = async (username: string, password: string): Promise<void> => {
    if (!username || !password) {
      Alert.alert('‚ùå Error', 'Usuario y contrase√±a son requeridos');
      return;
    }

    const userStr = username.trim();
    const passStr = password.trim();

    if (isLoading) return;

    setIsLoading(true);
    setError(null);
    
    try {
      console.log('üîê Iniciando autenticaci√≥n con Keycloak...');
      console.log('üìã Configuraci√≥n:', {
        username: userStr,
        clientId: KEYCLOAK_CONFIG.clientId,
        realm: KEYCLOAK_CONFIG.realm,
        baseUrl: KEYCLOAK_CONFIG.baseUrl,
        scope: KEYCLOAK_CONFIG.scope
      });

      // ‚úÖ ENDPOINT para token
      const tokenUrl = `${KEYCLOAK_CONFIG.baseUrl}/realms/${KEYCLOAK_CONFIG.realm}/protocol/openid-connect/token`;
      console.log('üåê Token endpoint:', tokenUrl);

      // Verificar conectividad primero
      console.log('üîÑ Verificando conectividad...');
      const isServerReachable = await checkServerConnectivity();
      if (!isServerReachable) {
        throw new Error(
          `No se puede conectar a Keycloak.\n\n` +
          `Verifica que:\n` +
          `‚Ä¢ Keycloak est√© corriendo en: ${KEYCLOAK_CONFIG.baseUrl}\n` +
          `‚Ä¢ El realm '${KEYCLOAK_CONFIG.realm}' exista\n` +
          `‚Ä¢ No haya firewall bloqueando el puerto 8080`
        );
      }

      // ‚úÖ CONFIGURAR PAR√ÅMETROS CON CLIENT_SECRET - SCOPE ACTUALIZADO
      const bodyParams = new URLSearchParams({
        grant_type: 'password',
        client_id: KEYCLOAK_CONFIG.clientId,
        client_secret: KEYCLOAK_CONFIG.clientSecret,
        username: userStr,
        password: passStr,
        scope: KEYCLOAK_CONFIG.scope
      });

      console.log('üì§ Enviando credenciales al servidor...');
      console.log('üéØ Scope solicitado:', KEYCLOAK_CONFIG.scope);

      const response = await fetchWithTimeout(tokenUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: bodyParams.toString()
      }, 15000);

      console.log('üì° Status de respuesta:', response.status);

      // Manejar errores de respuesta
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Error HTTP:', response.status, errorText);
        
        let errorMessage = 'Error de autenticaci√≥n';
        
        try {
          const errorData = JSON.parse(errorText);
          console.log('üîç Detalles del error:', errorData);
          
          // ‚úÖ MANEJO MEJORADO DE ERRORES - CORREGIDO PARA "Account is not fully set up"
          if (errorData.error === 'invalid_client') {
            errorMessage = 
              `‚ùå Error de configuraci√≥n del cliente\n\n` +
              `Posibles causas:\n` +
              `‚Ä¢ El client_secret es incorrecto\n` +
              `‚Ä¢ El cliente '${KEYCLOAK_CONFIG.clientId}' no existe\n` +
              `‚Ä¢ El cliente no est√° habilitado\n\n` +
              `Soluci√≥n:\n` +
              `1. Ve a Keycloak Admin Console\n` +
              `2. Clients ‚Üí ${KEYCLOAK_CONFIG.clientId}\n` +
              `3. Verifica la configuraci√≥n`;
          } else if (errorData.error === 'invalid_grant') {
            // ‚úÖ DIFERENCIAR ENTRE CREDENCIALES INCORRECTAS Y CUENTA NO CONFIGURADA
            if (errorData.error_description?.includes('Account is not fully set up')) {
              errorMessage = 
                `‚ùå Cuenta no completamente configurada\n\n` +
                `Tu cuenta requiere una configuraci√≥n adicional antes de poder iniciar sesi√≥n.\n\n` +
                `üîß Posibles soluciones:\n` +
                `‚Ä¢ Verifica tu email y confirma tu cuenta\n` +
                `‚Ä¢ Contacta al administrador del sistema\n` +
                `‚Ä¢ La cuenta puede requerir verificaci√≥n de email\n\n` +
                `üí° Si eres el administrador:\n` +
                `1. Ve a Keycloak Admin Console\n` +
                `2. Users ‚Üí Selecciona el usuario\n` +
                `3. En Details ‚Üí Email Verified = ON\n` +
                `4. Required User Actions = Vac√≠o`;
            } else if (errorData.error_description?.includes('Invalid user credentials')) {
              errorMessage = '‚ùå Usuario o contrase√±a incorrectos';
            } else {
              errorMessage = `‚ùå Error de autenticaci√≥n: ${errorData.error_description || 'Credenciales inv√°lidas'}`;
            }
          } else if (errorData.error === 'unauthorized_client') {
            errorMessage = 
              `‚ùå Cliente no autorizado\n\n` +
              `El cliente no tiene habilitado 'Direct Access Grants'.\n\n` +
              `Soluci√≥n en Keycloak:\n` +
              `1. Clients ‚Üí ${KEYCLOAK_CONFIG.clientId}\n` +
              `2. Settings ‚Üí Direct Access Grants Enabled = ON\n` +
              `3. Guardar cambios`;
          } else if (errorData.error === 'invalid_scope') {
            errorMessage = 
              `‚ùå Scope inv√°lido\n\n` +
              `El scope '${KEYCLOAK_CONFIG.scope}' no est√° configurado correctamente.\n\n` +
              `Verifica en Keycloak:\n` +
              `1. Client Scopes ‚Üí address est√° asignado al cliente\n` +
              `2. Mappers est√°n configurados para address`;
          } else if (errorData.error === 'invalid_request') {
            errorMessage = 
              `‚ùå Solicitud inv√°lida\n\n` +
              `La solicitud de autenticaci√≥n contiene par√°metros incorrectos.\n\n` +
              `Verifica la configuraci√≥n del cliente.`;
          } else {
            errorMessage = errorData.error_description || errorData.error || `Error ${response.status}`;
          }
        } catch (parseError) {
          console.error('‚ùå Error parseando respuesta de error:', parseError);
          errorMessage = `Error ${response.status}: ${response.statusText}`;
        }
        
        throw new Error(errorMessage);
      }

      // Parsear respuesta exitosa
      const authData: AuthResponse = await response.json();
      
      if (!authData.access_token) {
        throw new Error('No se recibi√≥ token de acceso del servidor');
      }

      console.log('‚úÖ Tokens recibidos correctamente');
      console.log('üîë Token type:', authData.token_type);
      console.log('‚è±Ô∏è Expires in:', authData.expires_in, 'segundos');
      console.log('üìã Scope recibido:', authData.scope);

      // Extraer informaci√≥n del usuario del ID token
      const userInfo = extractUserInfo(authData.id_token);

      if (!userInfo) {
        console.warn('‚ö†Ô∏è No se pudo extraer informaci√≥n del usuario');
      }

      // ‚úÖ ACTUALIZACI√ìN CR√çTICA: Actualizar estado de autenticaci√≥n
      const newAuthState = {
        isAuthenticated: true,
        accessToken: authData.access_token,
        refreshToken: authData.refresh_token || null,
        userInfo
      };

      console.log('üéâ Login exitoso para:', userInfo?.preferred_username || username);
      console.log('üîê Estado de autenticaci√≥n actualizado:', {
        isAuthenticated: newAuthState.isAuthenticated,
        hasToken: !!newAuthState.accessToken,
        user: newAuthState.userInfo?.preferred_username,
        phone: newAuthState.userInfo?.phone || 'No disponible',
        address: newAuthState.userInfo?.address || 'No disponible'
      });

      // ‚úÖ ACTUALIZAR EL ESTADO DE FORMA S√çNCRONA
      setAuthState(newAuthState);

      // ‚úÖ MOSTRAR ALERTA DESPU√âS de actualizar el estado
      setTimeout(() => {
        Alert.alert(
          '‚úÖ Inicio de Sesi√≥n Exitoso', 
          `Bienvenido ${userInfo?.name || userInfo?.preferred_username || username}`
        );
      }, 100);
      
    } catch (err: any) {
      console.error('‚ùå Error en proceso de login:', err);
      
      let errorMessage = err.message || 'Error desconocido de autenticaci√≥n';
      
      // Detectar errores de red
      if (errorMessage.includes('Failed to fetch') || 
          errorMessage.includes('Network request failed') ||
          errorMessage.includes('aborted')) {
        errorMessage = 
          `‚ùå Error de conexi√≥n\n\n` +
          `No se pudo conectar a Keycloak.\n\n` +
          `Verifica:\n` +
          `‚Ä¢ Keycloak est√° corriendo en ${KEYCLOAK_CONFIG.baseUrl}\n` +
          `‚Ä¢ Puedes acceder a la URL desde tu navegador\n` +
          `‚Ä¢ No hay problemas de red o firewall`;
      }
      
      setError(errorMessage);
      
      // ‚úÖ MOSTRAR ALERTA ESPEC√çFICA SEG√öN EL TIPO DE ERROR
      if (errorMessage.includes('Cuenta no completamente configurada')) {
        Alert.alert(
          '‚ùå Cuenta No Configurada', 
          errorMessage,
          [
            { text: 'Entendido', style: 'default' },
            { 
              text: 'Contactar Admin', 
              style: 'cancel',
              onPress: () => console.log('Contactar administrador')
            }
          ]
        );
      } else {
        Alert.alert('‚ùå Error de Autenticaci√≥n', errorMessage);
      }
      
      // ‚úÖ Asegurarse de que el estado de autenticaci√≥n sea false en caso de error
      setAuthState({
        isAuthenticated: false,
        accessToken: null,
        refreshToken: null,
        userInfo: null
      });
    } finally {
      setIsLoading(false);
    }
  };

  const logout = async (): Promise<void> => {
    if (isLoading) return;

    try {
      setIsLoading(true);
      console.log('üö™ Cerrando sesi√≥n...');

      const username = authState.userInfo?.preferred_username || 'Usuario';
      
      // Opcional: Llamar al endpoint de logout de Keycloak
      if (authState.refreshToken) {
        try {
          const logoutUrl = `${KEYCLOAK_CONFIG.baseUrl}/realms/${KEYCLOAK_CONFIG.realm}/protocol/openid-connect/logout`;
          
          const bodyParams = new URLSearchParams({
            client_id: KEYCLOAK_CONFIG.clientId,
            client_secret: KEYCLOAK_CONFIG.clientSecret,
            refresh_token: authState.refreshToken
          });

          await fetchWithTimeout(logoutUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: bodyParams.toString()
          }, 10000);
          
          console.log('‚úÖ Sesi√≥n cerrada en Keycloak');
        } catch (logoutError) {
          console.warn('‚ö†Ô∏è Error al cerrar sesi√≥n en Keycloak:', logoutError);
          // Continuar con el cierre local de todos modos
        }
      }
      
      // ‚úÖ Limpiar estado local - Asegurar que isAuthenticated sea false
      setAuthState({
        isAuthenticated: false,
        accessToken: null,
        refreshToken: null,
        userInfo: null
      });
      setError(null);
      
      console.log('‚úÖ Sesi√≥n cerrada localmente');
      Alert.alert('üëã Sesi√≥n Cerrada', `Hasta pronto, ${username}`);
      
    } catch (err: any) {
      console.error('‚ùå Error en logout:', err);
      
      // ‚úÖ Limpiar de todos modos - Asegurar que isAuthenticated sea false
      setAuthState({
        isAuthenticated: false,
        accessToken: null,
        refreshToken: null,
        userInfo: null
      });
      
      Alert.alert('‚ö†Ô∏è Aviso', 'Sesi√≥n cerrada localmente');
    } finally {
      setIsLoading(false);
    }
  };

  // ‚úÖ Efecto mejorado para debug de autenticaci√≥n
  useEffect(() => {
    console.log('üîÑ Estado de autenticaci√≥n actualizado:', {
      isAuthenticated: authState.isAuthenticated,
      user: authState.userInfo?.preferred_username || 'No user',
      hasToken: !!authState.accessToken,
      phone: authState.userInfo?.phone || 'No disponible',
      address: authState.userInfo?.address || 'No disponible'
    });

    if (authState.isAuthenticated && authState.userInfo) {
      console.log('üîê USUARIO AUTENTICADO CORRECTAMENTE:', {
        username: authState.userInfo.preferred_username,
        email: authState.userInfo.email,
        phone: authState.userInfo.phone || 'No disponible',
        address: authState.userInfo.address || 'No disponible',
        hasToken: !!authState.accessToken,
        allFields: Object.keys(authState.userInfo)
      });
    }
  }, [authState.isAuthenticated, authState.userInfo, authState.accessToken]);

  // Auto-limpiar errores despu√©s de 8 segundos
  useEffect(() => {
    if (error) {
      const timer = setTimeout(() => {
        setError(null);
      }, 8000);
      return () => clearTimeout(timer);
    }
  }, [error]);

  const providerValue: AuthContextValue = {
    authState,
    user: authState.userInfo,
    login,
    logout,
    isLoading,
    error,
    clearError
  };

  return (
    <AuthContext.Provider value={providerValue}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextValue => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth debe ser usado dentro de AuthProvider');
  }
  return context;
};